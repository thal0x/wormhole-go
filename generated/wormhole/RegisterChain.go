// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wormhole

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RegisterChain is the `registerChain` instruction.
type RegisterChain struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [] config
	//
	// [2] = [WRITE] endpoint
	//
	// [3] = [] vaa
	//
	// [4] = [WRITE] claim
	//
	// [5] = [] rent
	//
	// [6] = [] systemProgram
	//
	// [7] = [] wormholeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRegisterChainInstructionBuilder creates a new `RegisterChain` instruction builder.
func NewRegisterChainInstructionBuilder() *RegisterChain {
	nd := &RegisterChain{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *RegisterChain) SetPayerAccount(payer ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *RegisterChain) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *RegisterChain) SetConfigAccount(config ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *RegisterChain) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEndpointAccount sets the "endpoint" account.
func (inst *RegisterChain) SetEndpointAccount(endpoint ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(endpoint).WRITE()
	return inst
}

// GetEndpointAccount gets the "endpoint" account.
func (inst *RegisterChain) GetEndpointAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaaAccount sets the "vaa" account.
func (inst *RegisterChain) SetVaaAccount(vaa ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaa)
	return inst
}

// GetVaaAccount gets the "vaa" account.
func (inst *RegisterChain) GetVaaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetClaimAccount sets the "claim" account.
func (inst *RegisterChain) SetClaimAccount(claim ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(claim).WRITE()
	return inst
}

// GetClaimAccount gets the "claim" account.
func (inst *RegisterChain) GetClaimAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentAccount sets the "rent" account.
func (inst *RegisterChain) SetRentAccount(rent ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *RegisterChain) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RegisterChain) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RegisterChain) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWormholeProgramAccount sets the "wormholeProgram" account.
func (inst *RegisterChain) SetWormholeProgramAccount(wormholeProgram ag_solanago.PublicKey) *RegisterChain {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(wormholeProgram)
	return inst
}

// GetWormholeProgramAccount gets the "wormholeProgram" account.
func (inst *RegisterChain) GetWormholeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst RegisterChain) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RegisterChain,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RegisterChain) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RegisterChain) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Endpoint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Vaa is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Claim is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.WormholeProgram is not set")
		}
	}
	return nil
}

func (inst *RegisterChain) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RegisterChain")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       endpoint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            vaa", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          claim", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           rent", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("wormholeProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj RegisterChain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RegisterChain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRegisterChainInstruction declares a new RegisterChain instruction with the provided parameters and accounts.
func NewRegisterChainInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	endpoint ag_solanago.PublicKey,
	vaa ag_solanago.PublicKey,
	claim ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	wormholeProgram ag_solanago.PublicKey) *RegisterChain {
	return NewRegisterChainInstructionBuilder().
		SetPayerAccount(payer).
		SetConfigAccount(config).
		SetEndpointAccount(endpoint).
		SetVaaAccount(vaa).
		SetClaimAccount(claim).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetWormholeProgramAccount(wormholeProgram)
}
