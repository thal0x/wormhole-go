// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wormhole

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferNative is the `transferNative` instruction.
type TransferNative struct {
	Nonce         *uint32
	Amount        *uint64
	Fee           *uint64
	TargetAddress *[32]uint8
	TargetChain   *uint16

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [] config
	//
	// [2] = [WRITE] from
	//
	// [3] = [WRITE] mint
	//
	// [4] = [WRITE] custody
	//
	// [5] = [] authoritySigner
	//
	// [6] = [] custodySigner
	//
	// [7] = [WRITE] wormholeBridge
	//
	// [8] = [WRITE, SIGNER] wormholeMessage
	//
	// [9] = [] wormholeEmitter
	//
	// [10] = [WRITE] wormholeSequence
	//
	// [11] = [WRITE] wormholeFeeCollector
	//
	// [12] = [] clock
	//
	// [13] = [] rent
	//
	// [14] = [] systemProgram
	//
	// [15] = [] tokenProgram
	//
	// [16] = [] wormholeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferNativeInstructionBuilder creates a new `TransferNative` instruction builder.
func NewTransferNativeInstructionBuilder() *TransferNative {
	nd := &TransferNative{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *TransferNative) SetNonce(nonce uint32) *TransferNative {
	inst.Nonce = &nonce
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *TransferNative) SetAmount(amount uint64) *TransferNative {
	inst.Amount = &amount
	return inst
}

// SetFee sets the "fee" parameter.
func (inst *TransferNative) SetFee(fee uint64) *TransferNative {
	inst.Fee = &fee
	return inst
}

// SetTargetAddress sets the "targetAddress" parameter.
func (inst *TransferNative) SetTargetAddress(targetAddress [32]uint8) *TransferNative {
	inst.TargetAddress = &targetAddress
	return inst
}

// SetTargetChain sets the "targetChain" parameter.
func (inst *TransferNative) SetTargetChain(targetChain uint16) *TransferNative {
	inst.TargetChain = &targetChain
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *TransferNative) SetPayerAccount(payer ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *TransferNative) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *TransferNative) SetConfigAccount(config ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *TransferNative) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFromAccount sets the "from" account.
func (inst *TransferNative) SetFromAccount(from ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(from).WRITE()
	return inst
}

// GetFromAccount gets the "from" account.
func (inst *TransferNative) GetFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *TransferNative) SetMintAccount(mint ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *TransferNative) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCustodyAccount sets the "custody" account.
func (inst *TransferNative) SetCustodyAccount(custody ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(custody).WRITE()
	return inst
}

// GetCustodyAccount gets the "custody" account.
func (inst *TransferNative) GetCustodyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuthoritySignerAccount sets the "authoritySigner" account.
func (inst *TransferNative) SetAuthoritySignerAccount(authoritySigner ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authoritySigner)
	return inst
}

// GetAuthoritySignerAccount gets the "authoritySigner" account.
func (inst *TransferNative) GetAuthoritySignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCustodySignerAccount sets the "custodySigner" account.
func (inst *TransferNative) SetCustodySignerAccount(custodySigner ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(custodySigner)
	return inst
}

// GetCustodySignerAccount gets the "custodySigner" account.
func (inst *TransferNative) GetCustodySignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWormholeBridgeAccount sets the "wormholeBridge" account.
func (inst *TransferNative) SetWormholeBridgeAccount(wormholeBridge ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(wormholeBridge).WRITE()
	return inst
}

// GetWormholeBridgeAccount gets the "wormholeBridge" account.
func (inst *TransferNative) GetWormholeBridgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWormholeMessageAccount sets the "wormholeMessage" account.
func (inst *TransferNative) SetWormholeMessageAccount(wormholeMessage ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wormholeMessage).WRITE().SIGNER()
	return inst
}

// GetWormholeMessageAccount gets the "wormholeMessage" account.
func (inst *TransferNative) GetWormholeMessageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetWormholeEmitterAccount sets the "wormholeEmitter" account.
func (inst *TransferNative) SetWormholeEmitterAccount(wormholeEmitter ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(wormholeEmitter)
	return inst
}

// GetWormholeEmitterAccount gets the "wormholeEmitter" account.
func (inst *TransferNative) GetWormholeEmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetWormholeSequenceAccount sets the "wormholeSequence" account.
func (inst *TransferNative) SetWormholeSequenceAccount(wormholeSequence ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(wormholeSequence).WRITE()
	return inst
}

// GetWormholeSequenceAccount gets the "wormholeSequence" account.
func (inst *TransferNative) GetWormholeSequenceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetWormholeFeeCollectorAccount sets the "wormholeFeeCollector" account.
func (inst *TransferNative) SetWormholeFeeCollectorAccount(wormholeFeeCollector ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(wormholeFeeCollector).WRITE()
	return inst
}

// GetWormholeFeeCollectorAccount gets the "wormholeFeeCollector" account.
func (inst *TransferNative) GetWormholeFeeCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetClockAccount sets the "clock" account.
func (inst *TransferNative) SetClockAccount(clock ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *TransferNative) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *TransferNative) SetRentAccount(rent ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *TransferNative) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *TransferNative) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *TransferNative) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TransferNative) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TransferNative) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetWormholeProgramAccount sets the "wormholeProgram" account.
func (inst *TransferNative) SetWormholeProgramAccount(wormholeProgram ag_solanago.PublicKey) *TransferNative {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(wormholeProgram)
	return inst
}

// GetWormholeProgramAccount gets the "wormholeProgram" account.
func (inst *TransferNative) GetWormholeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst TransferNative) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferNative,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferNative) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferNative) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Fee == nil {
			return errors.New("Fee parameter is not set")
		}
		if inst.TargetAddress == nil {
			return errors.New("TargetAddress parameter is not set")
		}
		if inst.TargetChain == nil {
			return errors.New("TargetChain parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.From is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Custody is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AuthoritySigner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CustodySigner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.WormholeBridge is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WormholeMessage is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.WormholeEmitter is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.WormholeSequence is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.WormholeFeeCollector is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.WormholeProgram is not set")
		}
	}
	return nil
}

func (inst *TransferNative) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferNative")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Nonce", *inst.Nonce))
						paramsBranch.Child(ag_format.Param("       Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("          Fee", *inst.Fee))
						paramsBranch.Child(ag_format.Param("TargetAddress", *inst.TargetAddress))
						paramsBranch.Child(ag_format.Param("  TargetChain", *inst.TargetChain))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                from", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             custody", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     authoritySigner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       custodySigner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      wormholeBridge", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     wormholeMessage", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     wormholeEmitter", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    wormholeSequence", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("wormholeFeeCollector", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("               clock", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("     wormholeProgram", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj TransferNative) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	// Serialize `TargetAddress` param:
	err = encoder.Encode(obj.TargetAddress)
	if err != nil {
		return err
	}
	// Serialize `TargetChain` param:
	err = encoder.Encode(obj.TargetChain)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferNative) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	// Deserialize `TargetAddress`:
	err = decoder.Decode(&obj.TargetAddress)
	if err != nil {
		return err
	}
	// Deserialize `TargetChain`:
	err = decoder.Decode(&obj.TargetChain)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferNativeInstruction declares a new TransferNative instruction with the provided parameters and accounts.
func NewTransferNativeInstruction(
	// Parameters:
	nonce uint32,
	amount uint64,
	fee uint64,
	targetAddress [32]uint8,
	targetChain uint16,
	// Accounts:
	payer ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	from ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	custody ag_solanago.PublicKey,
	authoritySigner ag_solanago.PublicKey,
	custodySigner ag_solanago.PublicKey,
	wormholeBridge ag_solanago.PublicKey,
	wormholeMessage ag_solanago.PublicKey,
	wormholeEmitter ag_solanago.PublicKey,
	wormholeSequence ag_solanago.PublicKey,
	wormholeFeeCollector ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	wormholeProgram ag_solanago.PublicKey) *TransferNative {
	return NewTransferNativeInstructionBuilder().
		SetNonce(nonce).
		SetAmount(amount).
		SetFee(fee).
		SetTargetAddress(targetAddress).
		SetTargetChain(targetChain).
		SetPayerAccount(payer).
		SetConfigAccount(config).
		SetFromAccount(from).
		SetMintAccount(mint).
		SetCustodyAccount(custody).
		SetAuthoritySignerAccount(authoritySigner).
		SetCustodySignerAccount(custodySigner).
		SetWormholeBridgeAccount(wormholeBridge).
		SetWormholeMessageAccount(wormholeMessage).
		SetWormholeEmitterAccount(wormholeEmitter).
		SetWormholeSequenceAccount(wormholeSequence).
		SetWormholeFeeCollectorAccount(wormholeFeeCollector).
		SetClockAccount(clock).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetWormholeProgramAccount(wormholeProgram)
}
