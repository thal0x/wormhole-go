// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wormhole

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AttestToken is the `attestToken` instruction.
type AttestToken struct {
	Nonce *uint32

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [WRITE] config
	//
	// [2] = [] mint
	//
	// [3] = [] wrappedMeta
	//
	// [4] = [] splMetadata
	//
	// [5] = [WRITE] wormholeBridge
	//
	// [6] = [WRITE, SIGNER] wormholeMessage
	//
	// [7] = [] wormholeEmitter
	//
	// [8] = [WRITE] wormholeSequence
	//
	// [9] = [WRITE] wormholeFeeCollector
	//
	// [10] = [] clock
	//
	// [11] = [] rent
	//
	// [12] = [] systemProgram
	//
	// [13] = [] wormholeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAttestTokenInstructionBuilder creates a new `AttestToken` instruction builder.
func NewAttestTokenInstructionBuilder() *AttestToken {
	nd := &AttestToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *AttestToken) SetNonce(nonce uint32) *AttestToken {
	inst.Nonce = &nonce
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *AttestToken) SetPayerAccount(payer ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AttestToken) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *AttestToken) SetConfigAccount(config ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *AttestToken) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
func (inst *AttestToken) SetMintAccount(mint ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *AttestToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWrappedMetaAccount sets the "wrappedMeta" account.
func (inst *AttestToken) SetWrappedMetaAccount(wrappedMeta ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wrappedMeta)
	return inst
}

// GetWrappedMetaAccount gets the "wrappedMeta" account.
func (inst *AttestToken) GetWrappedMetaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSplMetadataAccount sets the "splMetadata" account.
func (inst *AttestToken) SetSplMetadataAccount(splMetadata ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(splMetadata)
	return inst
}

// GetSplMetadataAccount gets the "splMetadata" account.
func (inst *AttestToken) GetSplMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWormholeBridgeAccount sets the "wormholeBridge" account.
func (inst *AttestToken) SetWormholeBridgeAccount(wormholeBridge ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(wormholeBridge).WRITE()
	return inst
}

// GetWormholeBridgeAccount gets the "wormholeBridge" account.
func (inst *AttestToken) GetWormholeBridgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetWormholeMessageAccount sets the "wormholeMessage" account.
func (inst *AttestToken) SetWormholeMessageAccount(wormholeMessage ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(wormholeMessage).WRITE().SIGNER()
	return inst
}

// GetWormholeMessageAccount gets the "wormholeMessage" account.
func (inst *AttestToken) GetWormholeMessageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWormholeEmitterAccount sets the "wormholeEmitter" account.
func (inst *AttestToken) SetWormholeEmitterAccount(wormholeEmitter ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(wormholeEmitter)
	return inst
}

// GetWormholeEmitterAccount gets the "wormholeEmitter" account.
func (inst *AttestToken) GetWormholeEmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWormholeSequenceAccount sets the "wormholeSequence" account.
func (inst *AttestToken) SetWormholeSequenceAccount(wormholeSequence ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wormholeSequence).WRITE()
	return inst
}

// GetWormholeSequenceAccount gets the "wormholeSequence" account.
func (inst *AttestToken) GetWormholeSequenceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetWormholeFeeCollectorAccount sets the "wormholeFeeCollector" account.
func (inst *AttestToken) SetWormholeFeeCollectorAccount(wormholeFeeCollector ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(wormholeFeeCollector).WRITE()
	return inst
}

// GetWormholeFeeCollectorAccount gets the "wormholeFeeCollector" account.
func (inst *AttestToken) GetWormholeFeeCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetClockAccount sets the "clock" account.
func (inst *AttestToken) SetClockAccount(clock ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *AttestToken) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *AttestToken) SetRentAccount(rent ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AttestToken) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AttestToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AttestToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetWormholeProgramAccount sets the "wormholeProgram" account.
func (inst *AttestToken) SetWormholeProgramAccount(wormholeProgram ag_solanago.PublicKey) *AttestToken {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(wormholeProgram)
	return inst
}

// GetWormholeProgramAccount gets the "wormholeProgram" account.
func (inst *AttestToken) GetWormholeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst AttestToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AttestToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AttestToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AttestToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WrappedMeta is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SplMetadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WormholeBridge is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.WormholeMessage is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.WormholeEmitter is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WormholeSequence is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.WormholeFeeCollector is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.WormholeProgram is not set")
		}
	}
	return nil
}

func (inst *AttestToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AttestToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Nonce", *inst.Nonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         wrappedMeta", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         splMetadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      wormholeBridge", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     wormholeMessage", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     wormholeEmitter", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    wormholeSequence", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("wormholeFeeCollector", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("               clock", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     wormholeProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj AttestToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AttestToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

// NewAttestTokenInstruction declares a new AttestToken instruction with the provided parameters and accounts.
func NewAttestTokenInstruction(
	// Parameters:
	nonce uint32,
	// Accounts:
	payer ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	wrappedMeta ag_solanago.PublicKey,
	splMetadata ag_solanago.PublicKey,
	wormholeBridge ag_solanago.PublicKey,
	wormholeMessage ag_solanago.PublicKey,
	wormholeEmitter ag_solanago.PublicKey,
	wormholeSequence ag_solanago.PublicKey,
	wormholeFeeCollector ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	wormholeProgram ag_solanago.PublicKey) *AttestToken {
	return NewAttestTokenInstructionBuilder().
		SetNonce(nonce).
		SetPayerAccount(payer).
		SetConfigAccount(config).
		SetMintAccount(mint).
		SetWrappedMetaAccount(wrappedMeta).
		SetSplMetadataAccount(splMetadata).
		SetWormholeBridgeAccount(wormholeBridge).
		SetWormholeMessageAccount(wormholeMessage).
		SetWormholeEmitterAccount(wormholeEmitter).
		SetWormholeSequenceAccount(wormholeSequence).
		SetWormholeFeeCollectorAccount(wormholeFeeCollector).
		SetClockAccount(clock).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetWormholeProgramAccount(wormholeProgram)
}
