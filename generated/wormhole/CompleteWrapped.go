// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wormhole

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CompleteWrapped is the `completeWrapped` instruction.
type CompleteWrapped struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [] config
	//
	// [2] = [] vaa
	//
	// [3] = [WRITE] claim
	//
	// [4] = [] endpoint
	//
	// [5] = [WRITE] to
	//
	// [6] = [WRITE] toFees
	//
	// [7] = [WRITE] mint
	//
	// [8] = [] wrappedMeta
	//
	// [9] = [] mintAuthority
	//
	// [10] = [] rent
	//
	// [11] = [] systemProgram
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] wormholeProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCompleteWrappedInstructionBuilder creates a new `CompleteWrapped` instruction builder.
func NewCompleteWrappedInstructionBuilder() *CompleteWrapped {
	nd := &CompleteWrapped{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *CompleteWrapped) SetPayerAccount(payer ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CompleteWrapped) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *CompleteWrapped) SetConfigAccount(config ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CompleteWrapped) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaaAccount sets the "vaa" account.
func (inst *CompleteWrapped) SetVaaAccount(vaa ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaa)
	return inst
}

// GetVaaAccount gets the "vaa" account.
func (inst *CompleteWrapped) GetVaaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetClaimAccount sets the "claim" account.
func (inst *CompleteWrapped) SetClaimAccount(claim ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(claim).WRITE()
	return inst
}

// GetClaimAccount gets the "claim" account.
func (inst *CompleteWrapped) GetClaimAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEndpointAccount sets the "endpoint" account.
func (inst *CompleteWrapped) SetEndpointAccount(endpoint ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(endpoint)
	return inst
}

// GetEndpointAccount gets the "endpoint" account.
func (inst *CompleteWrapped) GetEndpointAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetToAccount sets the "to" account.
func (inst *CompleteWrapped) SetToAccount(to ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(to).WRITE()
	return inst
}

// GetToAccount gets the "to" account.
func (inst *CompleteWrapped) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetToFeesAccount sets the "toFees" account.
func (inst *CompleteWrapped) SetToFeesAccount(toFees ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(toFees).WRITE()
	return inst
}

// GetToFeesAccount gets the "toFees" account.
func (inst *CompleteWrapped) GetToFeesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMintAccount sets the "mint" account.
func (inst *CompleteWrapped) SetMintAccount(mint ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *CompleteWrapped) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWrappedMetaAccount sets the "wrappedMeta" account.
func (inst *CompleteWrapped) SetWrappedMetaAccount(wrappedMeta ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wrappedMeta)
	return inst
}

// GetWrappedMetaAccount gets the "wrappedMeta" account.
func (inst *CompleteWrapped) GetWrappedMetaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *CompleteWrapped) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(mintAuthority)
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *CompleteWrapped) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetRentAccount sets the "rent" account.
func (inst *CompleteWrapped) SetRentAccount(rent ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CompleteWrapped) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CompleteWrapped) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CompleteWrapped) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CompleteWrapped) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CompleteWrapped) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetWormholeProgramAccount sets the "wormholeProgram" account.
func (inst *CompleteWrapped) SetWormholeProgramAccount(wormholeProgram ag_solanago.PublicKey) *CompleteWrapped {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(wormholeProgram)
	return inst
}

// GetWormholeProgramAccount gets the "wormholeProgram" account.
func (inst *CompleteWrapped) GetWormholeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst CompleteWrapped) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CompleteWrapped,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CompleteWrapped) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CompleteWrapped) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Vaa is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Claim is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Endpoint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ToFees is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WrappedMeta is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.WormholeProgram is not set")
		}
	}
	return nil
}

func (inst *CompleteWrapped) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CompleteWrapped")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            vaa", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          claim", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       endpoint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             to", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         toFees", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    wrappedMeta", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  mintAuthority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           rent", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("wormholeProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj CompleteWrapped) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CompleteWrapped) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCompleteWrappedInstruction declares a new CompleteWrapped instruction with the provided parameters and accounts.
func NewCompleteWrappedInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	vaa ag_solanago.PublicKey,
	claim ag_solanago.PublicKey,
	endpoint ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	toFees ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	wrappedMeta ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	wormholeProgram ag_solanago.PublicKey) *CompleteWrapped {
	return NewCompleteWrappedInstructionBuilder().
		SetPayerAccount(payer).
		SetConfigAccount(config).
		SetVaaAccount(vaa).
		SetClaimAccount(claim).
		SetEndpointAccount(endpoint).
		SetToAccount(to).
		SetToFeesAccount(toFees).
		SetMintAccount(mint).
		SetWrappedMetaAccount(wrappedMeta).
		SetMintAuthorityAccount(mintAuthority).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetWormholeProgramAccount(wormholeProgram)
}
