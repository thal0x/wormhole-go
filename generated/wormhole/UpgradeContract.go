// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wormhole

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpgradeContract is the `upgradeContract` instruction.
type UpgradeContract struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [] vaa
	//
	// [2] = [WRITE] claim
	//
	// [3] = [] upgradeAuthority
	//
	// [4] = [WRITE] spill
	//
	// [5] = [WRITE] implementation
	//
	// [6] = [WRITE] programData
	//
	// [7] = [WRITE] tokenBridgeProgram
	//
	// [8] = [] rent
	//
	// [9] = [] clock
	//
	// [10] = [] bpfLoaderUpgradeable
	//
	// [11] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpgradeContractInstructionBuilder creates a new `UpgradeContract` instruction builder.
func NewUpgradeContractInstructionBuilder() *UpgradeContract {
	nd := &UpgradeContract{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *UpgradeContract) SetPayerAccount(payer ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *UpgradeContract) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaaAccount sets the "vaa" account.
func (inst *UpgradeContract) SetVaaAccount(vaa ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vaa)
	return inst
}

// GetVaaAccount gets the "vaa" account.
func (inst *UpgradeContract) GetVaaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetClaimAccount sets the "claim" account.
func (inst *UpgradeContract) SetClaimAccount(claim ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(claim).WRITE()
	return inst
}

// GetClaimAccount gets the "claim" account.
func (inst *UpgradeContract) GetClaimAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUpgradeAuthorityAccount sets the "upgradeAuthority" account.
func (inst *UpgradeContract) SetUpgradeAuthorityAccount(upgradeAuthority ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(upgradeAuthority)
	return inst
}

// GetUpgradeAuthorityAccount gets the "upgradeAuthority" account.
func (inst *UpgradeContract) GetUpgradeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSpillAccount sets the "spill" account.
func (inst *UpgradeContract) SetSpillAccount(spill ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(spill).WRITE()
	return inst
}

// GetSpillAccount gets the "spill" account.
func (inst *UpgradeContract) GetSpillAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetImplementationAccount sets the "implementation" account.
func (inst *UpgradeContract) SetImplementationAccount(implementation ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(implementation).WRITE()
	return inst
}

// GetImplementationAccount gets the "implementation" account.
func (inst *UpgradeContract) GetImplementationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetProgramDataAccount sets the "programData" account.
func (inst *UpgradeContract) SetProgramDataAccount(programData ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(programData).WRITE()
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *UpgradeContract) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBridgeProgramAccount sets the "tokenBridgeProgram" account.
func (inst *UpgradeContract) SetTokenBridgeProgramAccount(tokenBridgeProgram ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBridgeProgram).WRITE()
	return inst
}

// GetTokenBridgeProgramAccount gets the "tokenBridgeProgram" account.
func (inst *UpgradeContract) GetTokenBridgeProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *UpgradeContract) SetRentAccount(rent ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *UpgradeContract) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetClockAccount sets the "clock" account.
func (inst *UpgradeContract) SetClockAccount(clock ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *UpgradeContract) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetBpfLoaderUpgradeableAccount sets the "bpfLoaderUpgradeable" account.
func (inst *UpgradeContract) SetBpfLoaderUpgradeableAccount(bpfLoaderUpgradeable ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(bpfLoaderUpgradeable)
	return inst
}

// GetBpfLoaderUpgradeableAccount gets the "bpfLoaderUpgradeable" account.
func (inst *UpgradeContract) GetBpfLoaderUpgradeableAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpgradeContract) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpgradeContract {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpgradeContract) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst UpgradeContract) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpgradeContract,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpgradeContract) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpgradeContract) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vaa is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Claim is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UpgradeAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Spill is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Implementation is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBridgeProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.BpfLoaderUpgradeable is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpgradeContract) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpgradeContract")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 vaa", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               claim", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    upgradeAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               spill", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      implementation", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         programData", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  tokenBridgeProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("               clock", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("bpfLoaderUpgradeable", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj UpgradeContract) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UpgradeContract) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUpgradeContractInstruction declares a new UpgradeContract instruction with the provided parameters and accounts.
func NewUpgradeContractInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	vaa ag_solanago.PublicKey,
	claim ag_solanago.PublicKey,
	upgradeAuthority ag_solanago.PublicKey,
	spill ag_solanago.PublicKey,
	implementation ag_solanago.PublicKey,
	programData ag_solanago.PublicKey,
	tokenBridgeProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	bpfLoaderUpgradeable ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpgradeContract {
	return NewUpgradeContractInstructionBuilder().
		SetPayerAccount(payer).
		SetVaaAccount(vaa).
		SetClaimAccount(claim).
		SetUpgradeAuthorityAccount(upgradeAuthority).
		SetSpillAccount(spill).
		SetImplementationAccount(implementation).
		SetProgramDataAccount(programData).
		SetTokenBridgeProgramAccount(tokenBridgeProgram).
		SetRentAccount(rent).
		SetClockAccount(clock).
		SetBpfLoaderUpgradeableAccount(bpfLoaderUpgradeable).
		SetSystemProgramAccount(systemProgram)
}
